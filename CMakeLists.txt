cmake_minimum_required(VERSION 3.12.1)

project(3DApps)

SET(CMAKE_CXX_STANDARD 17)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE ON)

set(CMAKE_EXPORT_COMPILE_COMMANDS 1 ) 

set(MAJOR_VERSION 1)
set(MINOR_VERSION 0)
set(REVISION_VERSION 0)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMakeModules")

find_package(ArgumentViewer 1.0 CONFIG)
find_package(BasicCamera 1.0 CONFIG)
find_package(Simple3DApp 1.0.0 CONFIG REQUIRED)
find_package(Vars CONFIG)
find_package(assimp CONFIG)
find_package(StringAligner CONFIG)
find_package(glm CONFIG)

find_package(FreeImage)
find_package(FreeImagePlus)
find_package(k4a)
find_package(OpenCV)
find_package(PCL)
find_package(libusb-1.0)

set(SOURCES
  )

set(INCLUDES
  src/Timer.h
  )

function(doTargetsExists targets result)
  set(${result} true PARENT_SCOPE)
  foreach(target ${targets})
    if(NOT TARGET ${target})
      set(${result} false PARENT_SCOPE)
      break()
    endif()
  endforeach()
endfunction()

function(addObjectLibrary name sources targets)
  doTargetsExists("${targets}" prereq)
  if(${prereq})
    add_library(${name} STATIC ${sources})
    target_include_directories(${name} PUBLIC $<INSTALL_INTERFACE:include>)
    target_include_directories(${name} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>)
    target_link_libraries(${name} PUBLIC ${targets})
  endif()
endfunction()

function(addHeaderLibrary name targets)
  doTargetsExists("${targets}" prereq)
  if(${prereq})
    add_library(${name} INTERFACE)
    target_include_directories(${name} INTERFACE $<INSTALL_INTERFACE:include>)
    target_include_directories(${name} INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>)
    target_link_libraries(${name} INTERFACE ${targets})
  endif()
endfunction()

function(addApp2 name srcs targets)
  doTargetsExists("${targets}" prereq)
  if(NOT ${prereq})
    return()
  endif()

  add_executable(${name} ${srcs})
  target_include_directories(${name} PUBLIC $<INSTALL_INTERFACE:include>)
  target_include_directories(${name} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>)
  target_link_libraries(${name} PUBLIC Simple3DApp::Simple3DApp ${targets})
  set_target_properties(${name} PROPERTIES BUILD_WITH_INSTALL_RPATH 1 INSTALL_RPATH ${CMAKE_CURRENT_BINARY_DIR})
endfunction()

function(addApp3 name srcs targets output)
  doTargetsExists("${targets}" prereq)
  if(NOT ${prereq})
    return()
  endif()

  add_executable(${name} ${srcs})
  target_include_directories(${name} PUBLIC $<INSTALL_INTERFACE:include>)
  target_include_directories(${name} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>)
  target_link_libraries(${name} PUBLIC Simple3DApp::Simple3DApp ${targets})
  set_target_properties(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${output})
endfunction()

if(NOT "${OpenCV_LIBS}" STREQUAL "")
  add_library(cv INTERFACE)
  target_link_libraries(cv INTERFACE ${OpenCV_LIBS})
  target_include_directories(cv INTERFACE $<BUILD_INTERFACE:${OpenCV_INCLUDE_DIRS}>)
endif()

if(NOT "${PCL_LIBRARIES}" STREQUAL "")
  add_library(pcl INTERFACE)
  target_link_libraries(pcl INTERFACE ${PCL_LIBRARIES})
  target_include_directories(pcl INTERFACE $<BUILD_INTERFACE:${PCL_INCLUDE_DIRS})
endif()

add_library(libusb INTERFACE)
target_link_libraries(libusb INTERFACE ${LIBUSB_1_LIBRARY})
target_include_directories(libusb INTERFACE $<BUILD_INTERFACE:${LIBUSB_1_INCLUDE_DIRS})

addHeaderLibrary(timer            "")
addObjectLibrary(barrier          "src/Barrier.cpp;src/Barrier.h"     "Vars::Vars")
addObjectLibrary(imguiVars        "src/imguiVars.cpp;src/imguiVars.h;src/addVarsLimits.cpp;src/addVarsLimits.h" "Vars::Vars;imguiSDL2OpenGL::imguiSDL2OpenGL;glm")
addObjectLibrary(DrawGrid         "src/DrawGrid.cpp;src/DrawGrid.h"           "Vars::Vars;BasicCamera::BasicCamera;barrier")
addObjectLibrary(drawBunny        "src/drawBunny.cpp;src/drawBunny.h;src/bunny.h;src/bunny.c" "Vars::Vars;BasicCamera::BasicCamera;barrier")
addObjectLibrary(azureKinectUtils "src/azureKinectUtils.cpp;src/azureKinectUtils.h" "glm;k4a::k4a")
addObjectLibrary(kinectPointCloud "src/kinectPointCloud.cpp;src/kinectPointCloud.h"                  "Vars::Vars;BasicCamera::BasicCamera;barrier;k4a::k4a;azureKinectUtils;imguiVars;pcl;cv")
addObjectLibrary(faceDetect       "src/faceDetect.cpp;src/faceDetect.h"       "cv;glm")
addObjectLibrary(drawFace         "src/drawFace.cpp;src/bunny.h;src/bunny.c"  "Vars::Vars;BasicCamera::BasicCamera;barrier;faceDetect;k4a::k4a")

#addApp(gameOfLife src/gameOfLife.cpp)
#addApp2(spirv "src/spirv.cpp" "")
addApp2(emptyProject                          "src/emptyProject.cpp"                          "DrawGrid;imguiVars")
addApp2(pathTracing                           "src/pathTracing.cpp"                          "DrawGrid;imguiVars")
addApp2(rasterizationOrder                    "src/rasterizationOrder.cpp"                    "barrier;imguiVars")
addApp2(noise                                 "src/noise.cpp"                                 "barrier;imguiVars")
addApp2(sort                                  "src/Sort.cpp"                                  "ArgumentViewer::ArgumentViewer;StringAligner::StringAligner;imguiVars")
addApp2(linearInterpolationOfHomogenousCoords "src/linearInterpolationOfHomogenousCoords.cpp" "DrawGrid;imguiVars")
addApp2(infiniteInterpolation                 "src/infiniteInterpolation.cpp"                 "DrawGrid;imguiVars")
addApp2(csCompiler                            "src/csCompiler.cpp"                            "ArgumentViewer::ArgumentViewer")
addApp2(imagePointCloud                       "src/imagePointCloud.cpp"                       "ArgumentViewer::ArgumentViewer;DrawGrid;imguiVars;FreeImage;FreeImagePlus")
addApp2(kinectPointCloudViewer                "src/kinectPointCloudViewer.cpp"                "ArgumentViewer::ArgumentViewer;DrawGrid;FreeImage;kinectPointCloud")
addApp2(fragmentPlay                          "src/fragmentPlay.cpp"                          "ArgumentViewer::ArgumentViewer;barrier;imguiVars;FreeImage;FreeImagePlus")
addApp2(frameInterpolation                    "src/frameInterpolation.cpp"                    "ArgumentViewer::ArgumentViewer;barrier;imguiVars;FreeImage;FreeImagePlus")
addApp2(renderHolo                            "src/renderHolo.cpp"                            "ArgumentViewer::ArgumentViewer;DrawGrid;barrier;imguiVars;FreeImage;FreeImagePlus;drawBunny")
addApp2(renderHoloFocus                       "src/renderHoloFocus.cpp"                       "ArgumentViewer::ArgumentViewer;DrawGrid;barrier;imguiVars;FreeImage;FreeImagePlus;drawBunny")
addApp2(renderHoloApps                        "src/renderHoloApps.cpp;src/holoCalibration.h;src/holoCalibration.cpp;src/json.hpp"                        "ArgumentViewer::ArgumentViewer;DrawGrid;barrier;FreeImage;FreeImagePlus;drawBunny;kinectPointCloud;drawFace;libusb")
addApp2(memoryBandwidth                       "src/memoryBandwidth.cpp"                       "barrier;imguiVars")
addApp2(draw2d                                "src/draw2d.cpp"                                "barrier;imguiVars")
addApp2(morton2d                              "src/morton2d.cpp"                              "barrier;imguiVars;assimp::assimp")
addApp2(triangle                              "src/triangle.cpp"                              "")
addApp2(killGPU                               "src/killGPU.cpp"                               "ArgumentViewer::ArgumentViewer;Vars::Vars")
addApp2(quiltToNative                         "src/quiltToNative.cpp"                         "ArgumentViewer::ArgumentViewer;FreeImagePlus;glm")
addApp2(stupidCompiler                        "src/stupidCompiler.cpp"                        "barrier;imguiVars;ArgumentViewer::ArgumentViewer")

add_subdirectory(src/GMU)

function(printParam target prop)
  get_target_property(lala ${target} ${prop})
  message("  ${prop} ${lala}")
endfunction()

function(getSharedLibraries out lib cfg)
  #message("getSharedLibraries(${lib} ${cfg})")

  if(TARGET ${lib})
    get_target_property(target_type ${lib} TYPE)
    if(${target_type} STREQUAL "INTERFACE_LIBRARY")
      #message("  ${lib} JE ${target_type}")
      return()
    endif()
    #message("  ${lib} ${target_type}")
  else()
    #message("  ${lib} NENI TARGET")
    return()
  endif()


  get_target_property(fullLibraryName ${lib} IMPORTED_LOCATION_${cfg})
  get_target_property(libraryName ${lib} IMPORTED_SONAME_${cfg})
  get_target_property(linkLibraries ${lib} LINK_LIBRARIES)

  #printParam(${lib} LINK_LIBRARIES)

  if(NOT "${linkLibraries}" STREQUAL "linkLibraries-NOTFOUND")
    getAllSharedLibraries(lilib ${lib} ${cfg})
    set(${out} "${lilib}" PARENT_SCOPE)
    return()
  endif()

  #message("  ${lib} ---- ${fullLibraryName} ${libraryName}")

  string(REGEX MATCH "\\.dll$|\\.so" isDll ${fullLibraryName})
  if("${isDll}" STREQUAL "")
    return()
  endif()

  set(dlls)
  list(APPEND dlls ${fullLibraryName}\\\\ ${libraryName})

  get_target_property(interfaceLibs ${lib} INTERFACE_LINK_LIBRARIES)
  if(NOT "${interfaceLibs}" STREQUAL "interfaceLibs-NOTFOUND")
    foreach(interfaceLib ${interfaceLibs})
      getSharedLibraries(ilibs ${interfaceLib} ${cfg})
      list(APPEND dlls "${ilibs}")
    endforeach()
  endif()

  #list(REMOVE_DUPLICATES dlls)
  set(${out} "${dlls}" PARENT_SCOPE)
endfunction()

function(getAllSharedLibraries allLibraries app cfg)
  get_target_property(libs ${app} LINK_LIBRARIES)
  foreach(lib ${libs})
    getSharedLibraries(libList ${lib} ${cfg})
    #message("${lib} ###### ${libList}")
    list(APPEND allLibs "${libList}")
  endforeach()
  #list(REMOVE_DUPLICATES allLibs)
  set(${allLibraries} "${allLibs}" PARENT_SCOPE)
endfunction()


function(getFinalAllSharedLibraries all app cfg)
  getAllSharedLibraries(notFiltered ${app} ${cfg})
  list(REMOVE_DUPLICATES notFiltered)
  set(${all} "${notFiltered}" PARENT_SCOPE)
endfunction()

#getFinalAllSharedLibraries(allDebugSharedLibraries noise DEBUG)
#getFinalAllSharedLibraries(allReleaseSharedLibraries noise RELEASE)

#message("SharedDebug  : ${allDebugSharedLibraries}")
#message("SharedRelease: ${allReleaseSharedLibraries}")

if(MSVC)
  foreach(lib ${allDebugSharedLibraries})
    list(GET lib 0 fullNamePath)
    file(COPY ${fullNamePath} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Debug)
  endforeach()
  foreach(lib ${allReleaseSharedLibraries})
    list(GET lib 0 fullNamePath)
    file(COPY ${fullNamePath} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Release)
  endforeach()
endif() 

if(UNIX)
  foreach(lib ${allDebugSharedLibraries})
    list(GET lib 0 fullNamePath)
    list(GET lib 1 name)
    get_filename_component(fullName ${fullNamePath} NAME)
    file(COPY ${fullNamePath} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
    execute_process(COMMAND cmake -E create_symlink
        ${fullName}
        ${name}
    )
  endforeach()
  #foreach(lib ${allReleaseSharedLibraries})
  #  list(GET lib 0 libName)
  #  message(${libName})
  #  #file(COPY ${libName} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
  #endforeach()
endif()

#install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION .)
#install(FILES ${allDebugSharedLibraries} DESTINATION .)
